# schema file of the microservice

# defines data types, queries and mutations
# this can be done in a separate files as long as they are in this folder and
# end with .graphqls

type MediaRecord {
  # ID of the media record
  id: UUID!
  # Name of the media record
  name: String!
  # Type of the media record
  type: MediaType!
  # IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!
}

input CreateMediaRecordInput {
  # Name of the media record. Cannot be blank, maximum length 255 characters.
  name: String! @NotBlank @Size(max: 255)
  # Type of the media record.
  type: MediaType!
  # IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!
}

input UpdateMediaRecordInput {
  # ID of the media record which should be updated
  id: UUID!
  # New name of the media record. Cannot be blank, maximum length 255 characters.
  name: String! @NotBlank @Size(max: 255)
  # New type of the media record.
  type: MediaType!
  # IDs of the MediaContents this media record is associated with
  contentIds: [UUID!]!
}

type DownloadUrl {
  # pre-signed Url from which the file can be downloaded
  url: String
}

type UploadUrl {
  # pre-signed Url to which the file can be uploaded
  url: String
}

input CreateUrlInput {
  # id of the media record of the file for which a url should be generated
  id: UUID!
}

# The type of the media record
enum MediaType {
  VIDEO
  AUDIO
  IMAGE
  PRESENTATION
  DOCUMENT
  URL
}

type Query {
  # Returns the media records with the given IDs
  mediaRecordsById(ids: [UUID!]!): [MediaRecord!]!
  # Returns all media records
  mediaRecords: [MediaRecord!]!
  # Returns the media records associated the given content IDs as a list of lists where each sublist contains
  # the media records associated with the content ID at the same index in the input list
  mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!
}

type Mutation {
  # Creates a new media record
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!
  # Updates an existing media record with the given UUID
  updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!
    # Deletes the media record with the given UUID
  deleteMediaRecord(id: UUID!): UUID!
  # Creates a new upload URL for the given media record
  createStorageUploadUrl(input: CreateUrlInput): UploadUrl
  # Creates a new download URL for the given media record
  createStorageDownloadUrl(input: CreateUrlInput): DownloadUrl
}

