# schema file of the microservice

# defines data types, queries and mutations
# this can be done in a separate files as long as they are in this folder and
# end with .graphqls

type MediaRecord {
  """
  ID of the media record
  """
  id: UUID!
  """
  Name of the media record
  """
  name: String!
  """
  User ID of the creator of the media record.
  """
  creatorId: UUID!
  """
  Type of the media record
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
  """
  Temporary upload url for the media record
  """
  uploadUrl: String!
  """
  Temporary download url for the media record
  """
  downloadUrl: String!

  """
  The progress data of the given user for this medium.
  """
  userProgressData: MediaRecordProgressData!
}

type MediaRecordProgressData {

  """
  Whether the medium has been worked on by the user.
  """
  workedOn: Boolean!
  """
  Date on which the medium was worked on by the user.
  This is null if the medium has not been worked on by the user.
  """
  dateWorkedOn: DateTime
}

input CreateMediaRecordInput {
  """
  Name of the media record. Cannot be blank, maximum length 255 characters.
  """
  name: String! @NotBlank @Size(max: 255)
  """
  Type of the media record.
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
}

input UpdateMediaRecordInput {
  """
  ID of the media record which should be updated
  """
  id: UUID!
  """
  New name of the media record. Cannot be blank, maximum length 255 characters.
  """
  name: String! @NotBlank @Size(max: 255)
  """
  New type of the media record.
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
}

"""
The type of the media record
"""
enum MediaType {
  VIDEO
  AUDIO
  IMAGE
  PRESENTATION
  DOCUMENT
  URL
}

type Query {
  """
  Returns the media records with the given IDs. Throws an error if a MediaRecord corresponding to a given ID
  cannot be found.
  """
  mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!
  """
  Like mediaRecordsByIds() returns the media records with the given IDs, but instead of throwing an error if an ID
  cannot be found, it instead returns NULL for that media record.
  """
  findMediaRecordsByIds(ids: [UUID!]!): [MediaRecord]!
  """
  Returns all media records of the system.
  """
  mediaRecords: [MediaRecord!]! @deprecated(reason: "In production there should probably be no way to get all media records of the system.")
  """
  Returns all media records which the current user created.
  """
  userMediaRecords: [MediaRecord!]!
  """
  Returns the media records associated the given content IDs as a list of lists where each sublist contains
  the media records associated with the content ID at the same index in the input list
  """
  mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!
}

type Mutation {
  """
  Creates a new media record
  """
  createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!
  """
  Updates an existing media record with the given UUID
  """
  updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!
  """
  Deletes the media record with the given UUID
  """
  deleteMediaRecord(id: UUID!): UUID!
  """
  Allows multiple media records to be linked/added to a content.
  """
  linkMediaRecordsWithContent(contentId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!
  """
  Logs that a media has been worked on by the current user.
  See https://gits-enpro.readthedocs.io/en/latest/dev-manuals/gamification/userProgress.html

  Possible side effects:
  When all media records of a content have been worked on by a user,
  a user-progress event is emitted for the content.
  """
  logMediaRecordWorkedOn(mediaRecordId: UUID!): MediaRecord!
}

